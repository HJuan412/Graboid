#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Sep  6 11:23:12 2021

@author: hernan

Uses the taxIDs list generated by tax_retriever and reconstructs the taxonomy of each organism
"""

#%% libraries
from glob import glob
import pandas as pd

#%% functions
def load_nodes(nodesfile):
    # loads nodes table downloaded from genbank/taxonomy repository
    nodes = pd.read_csv(nodesfile, sep = '\t', header = None)
    
    nodes_labs = {0:'tax_id',
                  1:'parent tax_id',
                  2:'rank',
                  3:'embl code',
                  4:'division id',
                  5:'inherited div flag',
                  6:'genetic code id',
                  7:'inherited GC flag',
                  8:'mitochondrial genetic code id',
                  9:'inherited MGC flag',
                  10:'GenBank hidden flag',
                  11:'hidden subtree root flag',
                  12:'comments'}

    nodes.rename(columns = nodes_labs, inplace = True)
    
    nodes.set_index('tax_id', inplace=True)
    return nodes

def load_names(namesfile):
    # loads names table downloaded from genbank/taxonomy repository
    names = pd.read_csv(namesfile, sep = '\t', header = None)
    names_labs = {0:'tax_id',
              1:'name_txt',
              2:'unique_name',
              3:'name_class'}
    names.rename(columns = names_labs, inplace = True)
    names.set_index('tax_id', inplace = True)
    return names

def retrieve_names(name_tab, name_list):
    sub_tab = name_tab.loc[name_tab[0].isin(name_list)]
    sci_tab = sub_tab.loc[sub_tab[3] == 'scientific name']
    sci_tab.set_index(0, inplace = True)
    return sci_tab[1]

def tax_generator(nodes, ranks, taxid):
    """
    Retrieves the taxon IDs for a specified set of ranks in an organism's taxonomy.

    Parameters
    ----------
    nodes : pandas.DataFrame
        Table containing node information, used to locate parent taxons at each stage.
    ranks : list
        Taxonomic ranks of interest.
    taxid : int
        Starting taxon ID.

    Yields
    ------
    curr_id : int
        Current taxon ID.
    rank : str
        Current taxonomic rank.

    """
    curr_id = taxid
    rank = ''
    while curr_id != 1:
        rank = nodes.loc[curr_id, 'rank']
        if rank in ranks:
             yield curr_id, rank
        curr_id = nodes.loc[curr_id, 'parent tax_id']

# TODO: this function is now a method of Reconstructor, delete
def build_taxonomies(taxfile, nodesfile, ranks = ['phylum', 'class', 'order', 'family', 'genus', 'species'], outfile = None):
    """
    Retrieves the numeric ID of the clades of each organism's taxonomy at the ranks of interest.

    Parameters
    ----------
    taxfile : str
        Path to the accession-taxID table.
    nodesfile : str
        Path to the nodes.tsv table.
    ranks : list, optional
        List containing the ranks of interest (lower case). The default is ['phylum', 'class', 'order', 'family', 'genus', 'species'].
    outfile : str, optional
        Name of the file in which the generated table will be stored. If let empty, no file is generated. The default is None.

    Returns
    -------
    taxonomy_df : pandas. DataFrame
        Table containing the taxIDs of each element in each organism's taxonomy.

    """
    tax_tab = pd.read_csv(taxfile)
    nodes = load_nodes(nodesfile)
    taxonomy_df = pd.DataFrame(index=range(len(tax_tab)), columns = ['ACC', 'ACC short'] + ranks)
    
    for idx, row in tax_tab.iterrows():
        taxonomy_df.at[idx, 'ACC'] = row['1']
        builder = tax_generator(nodes, ranks, row['2'])
        for taxid, rank in builder:
            taxonomy_df.at[idx, rank] = taxid
    taxonomy_df.at[:, 'ACC short'] = [acc.split('.')[0] for acc in taxonomy_df['ACC']]
    if not outfile is None:
        taxonomy_df.to_csv(outfile, index = None)
    return taxonomy_df

def build_taxtab(taxids, nodes, ranks):
    taxdict = {}
    
    for taxid in taxids:
        subdict = {}
        tax_gen = tax_generator(nodes, ranks, taxid)
        for tax, rank in tax_gen:
            subdict[rank] = tax
        taxdict[taxid] = subdict
    
    taxtab = pd.DataFrame.from_dict(taxdict, orient='index')
    taxtab.fillna(0, inplace = True)
    return taxtab.astype(int)

def reconstruct_all(in_dir, ranks = ['phylum', 'class', 'order', 'family', 'genus', 'species']):
    acc2tax_files = glob(f'{in_dir}/*acc2taxid.tsv')
    for acc2tax in acc2tax_files:
        print(f'Processing {acc2tax}')
        rec = Reconstructor(in_dir, acc2tax, ranks)
        rec.build_taxonomy()
        rec.save()
    return
#%% classes
class Reconstructor():
    def __init__(self, in_dir, acc2tax, ranks = ['phylum', 'class', 'order', 'family', 'genus', 'species']):
        self.in_dir = in_dir
        self.out_file = self.generate_filename(acc2tax)
        self.acc2tax = pd.read_csv(acc2tax, sep = '\t', index_col = 0)
        self.ranks = ranks
        self.nodes = load_nodes(f'{in_dir}/nodes.tsv')
        self.names = load_names(f'{in_dir}/names.tsv')
        self.tax_tab = build_taxtab(self.acc2tax['2'].unique().tolist(), self.nodes, ranks)
        self.ver_series = self.acc2tax['1']
        self.taxonomy_df = pd.DataFrame(data = 0, index=self.acc2tax.index, columns = self.ranks, dtype = int)
    
    def generate_filename(self, acc2tax):
        short_name = acc2tax.split('/')[-1][:-13]
        return f'{self.in_dir}/{short_name}tax.tsv'

    def build_taxonomy(self):
        acclist = self.acc2tax.index.tolist()
        idlist = self.acc2tax['2'].tolist()
        self.taxonomy_df.at[acclist, :] = self.tax_tab.loc[idlist,:].set_index(self.acc2tax.index)
    
    def save(self):
        out_tab = pd.concat([self.ver_series, self.taxonomy_df], axis = 1)
        out_tab.rename(columns = {'1':'Version'}, inplace = True)
        out_tab.index.name = 'Accession'
        
        out_tab.to_csv(self.out_file, sep = '\t')
