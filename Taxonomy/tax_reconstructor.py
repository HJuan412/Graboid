#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Sep  6 11:23:12 2021

@author: hernan

Uses the taxIDs list generated by tax_retriever and reconstructs the taxonomy of each organism
"""

#%% Libraries
import pandas as pd

#%% 
def load_nodes(nodesfile):
    # loads nodes table downloaded from genbank/taxonomy repository
    nodes = pd.read_csv(nodesfile, sep = '\t', header = None)
    
    nodes_labs = {0:'tax_id',
                  1:'parent tax_id',
                  2:'rank',
                  3:'embl code',
                  4:'division id',
                  5:'inherited div flag',
                  6:'genetic code id',
                  7:'inherited GC flag',
                  8:'mitochondrial genetic code id',
                  9:'inherited MGC flag',
                  10:'GenBank hidden flag',
                  11:'hidden subtree root flag',
                  12:'comments'}

    nodes.rename(columns = nodes_labs, inplace = True)
    
    nodes.set_index('tax_id', inplace=True)
    return nodes

def load_names(namesfile):
    # loads names table downloaded from genbank/taxonomy repository
    names = pd.read_csv(namesfile, sep = '\t', header = None)
    names_labs = {0:'tax_id',
              1:'name_txt',
              2:'unique_name',
              3:'name_class'}
    names.rename(columns = names_labs, inplace = True)
    names.set_index('tax_id', inplace = True)
    return names

def tax_generator(nodes, ranks, taxid):
    """
    Retrieves the taxon IDs for a specified set of ranks in an organism's taxonomy.

    Parameters
    ----------
    nodes : pandas.DataFrame
        Table containing node information, used to locate parent taxons at each stage.
    ranks : list
        Taxonomic ranks of interest.
    taxid : int
        Starting taxon ID.

    Yields
    ------
    curr_id : int
        Current taxon ID.
    rank : str
        Current taxonomic rank.

    """
    curr_id = taxid
    rank = ''
    while curr_id != 1:
        rank = nodes.loc[curr_id, 'rank']
        if rank in ranks:
             yield curr_id, rank
        curr_id = nodes.loc[curr_id, 'parent tax_id']

def build_taxonomies(taxfile, nodesfile, ranks = ['phylum', 'class', 'order', 'family', 'genus', 'species'], outfile = None):
    """
    Retrieves the numeric ID of the clades of each organism's taxonomy at the ranks of interest.

    Parameters
    ----------
    taxfile : str
        Path to the accession-taxID table.
    nodesfile : str
        Path to the nodes.tsv table.
    ranks : list, optional
        List containing the ranks of interest (lower case). The default is ['phylum', 'class', 'order', 'family', 'genus', 'species'].
    outfile : str, optional
        Name of the file in which the generated table will be stored. If let empty, no file is generated. The default is None.

    Returns
    -------
    taxonomy_df : pandas. DataFrame
        Table containing the taxIDs of each element in each organism's taxonomy.

    """
    tax_tab = pd.read_csv(taxfile)
    nodes = load_nodes(nodesfile)
    taxonomy_df = pd.DataFrame(index=range(len(tax_tab)), columns = ['ACC', 'ACC short'] + ranks)
    
    for idx, row in tax_tab.iterrows():
        taxonomy_df.at[idx, 'ACC'] = row['1']
        builder = tax_generator(nodes, ranks, row['2'])
        for taxid, rank in builder:
            taxonomy_df.at[idx, rank] = taxid
    taxonomy_df.at[:, 'ACC short'] = [acc.split('.')[0] for acc in taxonomy_df['ACC']]
    if not outfile is None:
        taxonomy_df.to_csv(outfile, index = None)
    return taxonomy_df